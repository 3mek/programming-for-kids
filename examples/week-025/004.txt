import pgzrun
HEIGHT = 800
WIDTH = 800

board = []

black = [
    Actor('chess/rook-black',anchor=(0,0), pos=(0,0)),
    Actor('chess/knight-black',anchor=(0,0), pos=(100,0)),
    Actor('chess/bishop-black',anchor=(0,0), pos=(200,0)),
    Actor('chess/queen-black',anchor=(0,0), pos=(300,0)),
    Actor('chess/king-black',anchor=(0,0), pos=(400,0)),
    Actor('chess/bishop-black',anchor=(0,0), pos=(500,0)),
    Actor('chess/knight-black',anchor=(0,0), pos=(600,0)),
    Actor('chess/rook-black',anchor=(0,0), pos=(700,0)),
    Actor('chess/pawn-black',anchor=(0,0), pos=(0,100)),
    Actor('chess/pawn-black',anchor=(0,0), pos=(100,100)),
    Actor('chess/pawn-black',anchor=(0,0), pos=(200,100)),
    Actor('chess/pawn-black',anchor=(0,0), pos=(300,100)),
    Actor('chess/pawn-black',anchor=(0,0), pos=(400,100)),
    Actor('chess/pawn-black',anchor=(0,0), pos=(500,100)),
    Actor('chess/pawn-black',anchor=(0,0), pos=(600,100)),
    Actor('chess/pawn-black',anchor=(0,0), pos=(700,100)),
]

white = [
    Actor('chess/pawn-white',anchor=(0,0), pos=(0,600)),
    Actor('chess/pawn-white',anchor=(0,0), pos=(100,600)),
    Actor('chess/pawn-white',anchor=(0,0), pos=(200,600)),
    Actor('chess/pawn-white',anchor=(0,0), pos=(300,600)),
    Actor('chess/pawn-white',anchor=(0,0), pos=(400,600)),
    Actor('chess/pawn-white',anchor=(0,0), pos=(500,600)),
    Actor('chess/pawn-white',anchor=(0,0), pos=(600,600)),
    Actor('chess/pawn-white',anchor=(0,0), pos=(700,600)),
    Actor('chess/rook-white',anchor=(0,0), pos=(0,700)),
    Actor('chess/knight-white',anchor=(0,0), pos=(100,700)),
    Actor('chess/bishop-white',anchor=(0,0), pos=(200,700)),
    Actor('chess/queen-white',anchor=(0,0), pos=(300,700)),
    Actor('chess/king-white',anchor=(0,0), pos=(400,700)),
    Actor('chess/bishop-white',anchor=(0,0), pos=(500,700)),
    Actor('chess/knight-white',anchor=(0,0), pos=(600,700)),
    Actor('chess/rook-white',anchor=(0,0), pos=(700,700)),
]

x = 0
y = 0

block = 0
for i in range(1,65):
    if block % 2 == 0:
        board.append(Actor('chess/white',anchor=(0,0), pos=(x,y)))
    else:
        board.append(Actor('chess/black',anchor=(0,0), pos=(x,y)))

    block += 1
    x += 100
    if i != 0 and i%8 == 0:
        y += 100
        x = 0
        block+=3

pick_white = None
pick_black = None
elf = Actor("c1",ancor=(0,0))
king = Actor("c2")
x = 0
y = 0

def on_key_down(key):
    global pick_white,pick_black,x,y

    if key == keys.SPACE and pick_white == None:
        # pick up the piece below
        for w in white:
            if elf.colliderect(w):
                pick_white = w

                # store the original position
                x = w.x
                y = w.y
                
    elif key == keys.SPACE and pick_white != None:
        for square in board:
            # shouldnt be able to drop if there is already white piece there
            if elf.colliderect(square):
                for w in white:
                    if w != pick_white and square.colliderect(w):
                      return

                # pawns cant move backwards
                if pick_white.image == 'chess/pawn-white' and square.y > y:
                    return
                
                # snap the white piece to the board
                pick_white.x = square.x
                pick_white.y = square.y

                # take the black piece if there
                for b in list(black):
                    if b.colliderect(pick_white):
                        black.remove(b)

                # Queening the Pawn:
                # pick_white.image is chess/pawn-white for the white pawn
                # set the pick_white.image to chess/queen-white if it reaches the black end of the board
                if pick_white.image == 'chess/pawn-white' and pick_white.y == 0:
                    pick_white.image = 'chess/queen-white'
                
                # drop it
                pick_white = None
                break
    if key == keys.P and pick_black == None:
        # pick up the piece below
        for b in black:
            if king.colliderect(b):
                pick_black = b 

                # store the original position                
                y = b.y
                x = b.x
    elif key == keys.P and pick_black != None:
        for square in board:
            if king.colliderect(square):
                # dont allow a drop if there is already a black piece there
                for b in black:
                    if b != pick_black and square.colliderect(b):
                        return

                # pawns cant move backwards
                if pick_black.image == 'chess/pawn-black' and square.y < y:
                    return

                # snap the black piece to the board
                pick_black.x = square.x
                pick_black.y = square.y

                # take the white piece if there
                for w in list(white):
                    if w.colliderect(pick_black):
                        white.remove(w)
    
                # Queen the Pawn
                if pick_black.image == 'chess/pawn-black' and pick_black.y == 700:
                    pick_black.image = 'chess/queen-black'

                # drop it
                pick_black = None
                break

def update():
    global pick_white,pick_black
   
    if keyboard.W:
        elf.y -= 5
    if keyboard.S:
        elf.y += 5  
    if keyboard.A:
        elf.x -= 5  
    if keyboard.D:
        elf.x += 5      
    if keyboard.UP:
        king.y -= 5
    if keyboard.DOWN:
        king.y += 5
    if keyboard.LEFT:
        king.x -= 5
    if keyboard.RIGHT:
        king.x += 5
    
    # move the white piece with the elf
    if pick_white != None:
        pick_white.x = elf.x - 30
        pick_white.y = elf.y - 30

    # move the black piece with the king
    if pick_black != None:
        pick_black.x = king.x - 30
        pick_black.y = king.y - 30



def draw():
    screen.fill('deepskyblue')

    for square in board:
        square.draw()
    for b in black:
        b.draw()
    for w in white:
        w.draw()

    elf.draw()
    king.draw()

pgzrun.go()

