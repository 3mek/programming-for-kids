def cpu(IP, IS, R0, R1, memory):
    #    0 halt
    #    1 add R0 = R0 + R1, 2 subtract R0 = R0 - R1
    #    3 inc R0, 4 inc R1
    #    5 dec R0, 6 dec R1
    #    7 ring bell
    #  8 X print X
    #  9 X R0 = mem[X]
    # 10 X R1 = mem[X]
    # 11 X mem[X] = R0
    # 12 X mem[X] = R1
    # 13 X jump to address X
    # 14 X jump to address X if R0 == 0
    # 15 X jump to address X if R0 != 0

    while True:
        IS = memory[IP]
        print('instruction pointer:',IP,'instruction store:',IS)
        if IS == 0:
            break
        elif IS == 1:
            R0 = R0 + R1
            IP += 1
        elif IS == 2:
            R0 = R0 - R1
            IP += 1
        elif IS == 3:
            R0 += 1
            IP += 1
        elif IS == 4:
            R1 += 1
            IP += 1
        elif IS == 5:
            R0 -= 1
            IP += 1
        elif IS == 6:
            R1 -= 1
            IP += 1
        elif IS == 7:
            print("*** BEEP ***")
            IP += 1
        elif IS == 8:
            print("*** ", memory[IP+1], " ***")
            IP += 2
        elif IS == 9:
            R0 = memory[memory[IP+1]]
            IP += 2
        elif IS == 10:
            R1 = memory[memory[IP+1]]
            IP += 2
        elif IS == 11:
            memory[memory[IP+1]] = R0
            IP += 2
        elif IS == 12:
            memory[memory[IP+1]] = R1
            IP += 2
        elif IS == 13:
            IP = memory[IP + 1]
        elif IS == 14:
            if R0 == 0:
                IP = memory[IP + 1]
            else:
                IP += 2
        elif IS == 15:
            if R0 != 0:
                IP = memory[IP + 1]
            else:
                IP += 2

state = []
program = input('memory> ').split()
memory = [int(s) for s in program]
cpu(0,0,0,0, memory)
