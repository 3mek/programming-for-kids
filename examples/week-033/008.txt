import pgzrun
import random
HEIGHT = 600
WIDTH = 600

elf = Actor("elf")
speed = 3
dict_to_draw = []
radius = 5
color = [255, 0, 0]
filled = True
userect = True

def update():
    global radius, color, filled,userect

    #######################################################
    # MOVEMENT
    #######################################################
    if keyboard.A:
        elf.x -= speed
    if keyboard.D:
        elf.x += speed
    if keyboard.W:
        elf.y -= speed
    if keyboard.S:
        elf.y += speed

    #######################################################
    # FILLED NOT FILLED, RECT NOT RECT
    #######################################################
    if keyboard.F:
        filled = True
    if keyboard.G:
        filled = False
    if keyboard.R:
        userect = True
    if keyboard.T:
        userect = False

    #######################################################
    # COLOR AND RADIUS
    #######################################################
    # RADIUS
    if keyboard.K_9:
        radius += 1
    if keyboard.K_0:
        radius -= 1
    # COLORS
    if keyboard.K_1:
        color = [255, 0, 0]
    if keyboard.K_2:
        color = [0, 255, 0]
    if keyboard.K_3:
        color = [0, 0, 255]
    if keyboard.K_4:
        color = [255, 0, 255]
    if keyboard.K_5:
        color = [255, 255, 0]
    if keyboard.K_6:
        color = [0, 255, 255]
    if keyboard.K_7:
        color = [128, 128, 255]
    if keyboard.K_8:
        color = [random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)]

    #######################################################
    # ADD CIRCLES TO DRAW
    #######################################################
    if keyboard.SPACE:
        f = {
            "x": elf.x,            # x position
            "y": elf.y,            # y position
            "color": color,        # [red, green, blue]
            "radius": radius,      # current radius
            "filled": filled,
            "userect":userect
        }

        dict_to_draw.append(f)


def draw():

    screen.fill('white')

    for element in dict_to_draw:
        if not element["filled"]:
            if not element["userect"]:
                screen.draw.circle(
                    [element["x"], element["y"]], # [x, y]
                    element["radius"],            # radius
                    element["color"]              # [red, green, blue]
                )
            else:
                baz = Rect([element["x"], element["y"]], [element["radius"], element["radius"]])
                screen.draw.rect(baz,element["color"])
        else:
            if not element["userect"]:
                screen.draw.filled_circle(
                    [element["x"], element["y"]], # [x, y]
                    element["radius"],            # radius
                    element["color"]              # [red, green, blue]
                )
            else:
                baz = Rect([element["x"], element["y"]], [element["radius"], element["radius"]])
                screen.draw.filled_rect(baz, element["color"])
    if userect:
        baz = Rect([elf.x, elf.y], [radius, radius])
        screen.draw.rect(baz,color)
    else:
        screen.draw.circle(
            [elf.x, elf.y],  # pos [x, y]
            radius,          # radius
            color            # color [red, green, blue]
        )

    elf.draw()


pgzrun.go()
